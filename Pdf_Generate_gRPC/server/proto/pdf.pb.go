// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/pdf.proto

package pdf

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PDFRequest struct {
	Content              string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PDFRequest) Reset()         { *m = PDFRequest{} }
func (m *PDFRequest) String() string { return proto.CompactTextString(m) }
func (*PDFRequest) ProtoMessage()    {}
func (*PDFRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5b0a63e18f62f21, []int{0}
}

func (m *PDFRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PDFRequest.Unmarshal(m, b)
}
func (m *PDFRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PDFRequest.Marshal(b, m, deterministic)
}
func (m *PDFRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PDFRequest.Merge(m, src)
}
func (m *PDFRequest) XXX_Size() int {
	return xxx_messageInfo_PDFRequest.Size(m)
}
func (m *PDFRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PDFRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PDFRequest proto.InternalMessageInfo

func (m *PDFRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type PDFResponse struct {
	PdfData              []byte   `protobuf:"bytes,1,opt,name=pdf_data,json=pdfData,proto3" json:"pdf_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PDFResponse) Reset()         { *m = PDFResponse{} }
func (m *PDFResponse) String() string { return proto.CompactTextString(m) }
func (*PDFResponse) ProtoMessage()    {}
func (*PDFResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5b0a63e18f62f21, []int{1}
}

func (m *PDFResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PDFResponse.Unmarshal(m, b)
}
func (m *PDFResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PDFResponse.Marshal(b, m, deterministic)
}
func (m *PDFResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PDFResponse.Merge(m, src)
}
func (m *PDFResponse) XXX_Size() int {
	return xxx_messageInfo_PDFResponse.Size(m)
}
func (m *PDFResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PDFResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PDFResponse proto.InternalMessageInfo

func (m *PDFResponse) GetPdfData() []byte {
	if m != nil {
		return m.PdfData
	}
	return nil
}

func init() {
	proto.RegisterType((*PDFRequest)(nil), "pdf.PDFRequest")
	proto.RegisterType((*PDFResponse)(nil), "pdf.PDFResponse")
}

func init() { proto.RegisterFile("proto/pdf.proto", fileDescriptor_a5b0a63e18f62f21) }

var fileDescriptor_a5b0a63e18f62f21 = []byte{
	// 157 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x48, 0x49, 0xd3, 0x03, 0xb3, 0x84, 0x98, 0x0b, 0x52, 0xd2, 0x94, 0xd4, 0xb8,
	0xb8, 0x02, 0x5c, 0xdc, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x24, 0xb8, 0xd8, 0x93,
	0xf3, 0xf3, 0x4a, 0x52, 0xf3, 0x4a, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x60, 0x5c, 0x25,
	0x0d, 0x2e, 0x6e, 0xb0, 0xba, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x49, 0x2e, 0x8e, 0x82,
	0x94, 0xb4, 0xf8, 0x94, 0xc4, 0x92, 0x44, 0xb0, 0x4a, 0x9e, 0x20, 0xf6, 0x82, 0x94, 0x34, 0x97,
	0xc4, 0x92, 0x44, 0x23, 0x3b, 0xb0, 0x89, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42, 0x06,
	0x5c, 0xdc, 0xee, 0xa9, 0x79, 0xa9, 0x45, 0x89, 0x25, 0xa9, 0x01, 0x2e, 0x6e, 0x42, 0xfc, 0x7a,
	0x20, 0xfb, 0x11, 0x36, 0x4a, 0x09, 0x20, 0x04, 0x20, 0x46, 0x27, 0xb1, 0x81, 0x5d, 0x67, 0x0c,
	0x08, 0x00, 0x00, 0xff, 0xff, 0xe8, 0xf4, 0x9b, 0xe4, 0xb0, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PDFServiceClient is the client API for PDFService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PDFServiceClient interface {
	GeneratePDF(ctx context.Context, in *PDFRequest, opts ...grpc.CallOption) (*PDFResponse, error)
}

type pDFServiceClient struct {
	cc *grpc.ClientConn
}

func NewPDFServiceClient(cc *grpc.ClientConn) PDFServiceClient {
	return &pDFServiceClient{cc}
}

func (c *pDFServiceClient) GeneratePDF(ctx context.Context, in *PDFRequest, opts ...grpc.CallOption) (*PDFResponse, error) {
	out := new(PDFResponse)
	err := c.cc.Invoke(ctx, "/pdf.PDFService/GeneratePDF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PDFServiceServer is the server API for PDFService service.
type PDFServiceServer interface {
	GeneratePDF(context.Context, *PDFRequest) (*PDFResponse, error)
}

// UnimplementedPDFServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPDFServiceServer struct {
}

func (*UnimplementedPDFServiceServer) GeneratePDF(ctx context.Context, req *PDFRequest) (*PDFResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneratePDF not implemented")
}

func RegisterPDFServiceServer(s *grpc.Server, srv PDFServiceServer) {
	s.RegisterService(&_PDFService_serviceDesc, srv)
}

func _PDFService_GeneratePDF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PDFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PDFServiceServer).GeneratePDF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pdf.PDFService/GeneratePDF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PDFServiceServer).GeneratePDF(ctx, req.(*PDFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PDFService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pdf.PDFService",
	HandlerType: (*PDFServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GeneratePDF",
			Handler:    _PDFService_GeneratePDF_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pdf.proto",
}
