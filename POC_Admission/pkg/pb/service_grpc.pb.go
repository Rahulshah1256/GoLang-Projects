// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.3.0
// source: service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdmissionServiceClient is the client API for AdmissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdmissionServiceClient interface {
	GetLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	CreateRegistration(ctx context.Context, in *RegistraionRequest, opts ...grpc.CallOption) (*RegistraionResponse, error)
	GetRegInfo(ctx context.Context, in *GetReg, opts ...grpc.CallOption) (*RegistraionRequest, error)
}

type admissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdmissionServiceClient(cc grpc.ClientConnInterface) AdmissionServiceClient {
	return &admissionServiceClient{cc}
}

func (c *admissionServiceClient) GetLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/pb.AdmissionService/getLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admissionServiceClient) CreateRegistration(ctx context.Context, in *RegistraionRequest, opts ...grpc.CallOption) (*RegistraionResponse, error) {
	out := new(RegistraionResponse)
	err := c.cc.Invoke(ctx, "/pb.AdmissionService/CreateRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admissionServiceClient) GetRegInfo(ctx context.Context, in *GetReg, opts ...grpc.CallOption) (*RegistraionRequest, error) {
	out := new(RegistraionRequest)
	err := c.cc.Invoke(ctx, "/pb.AdmissionService/GetRegInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdmissionServiceServer is the server API for AdmissionService service.
// All implementations must embed UnimplementedAdmissionServiceServer
// for forward compatibility
type AdmissionServiceServer interface {
	GetLogin(context.Context, *LoginRequest) (*LoginResponse, error)
	CreateRegistration(context.Context, *RegistraionRequest) (*RegistraionResponse, error)
	GetRegInfo(context.Context, *GetReg) (*RegistraionRequest, error)
	mustEmbedUnimplementedAdmissionServiceServer()
}

// UnimplementedAdmissionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdmissionServiceServer struct {
}

func (UnimplementedAdmissionServiceServer) GetLogin(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogin not implemented")
}
func (UnimplementedAdmissionServiceServer) CreateRegistration(context.Context, *RegistraionRequest) (*RegistraionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegistration not implemented")
}
func (UnimplementedAdmissionServiceServer) GetRegInfo(context.Context, *GetReg) (*RegistraionRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegInfo not implemented")
}
func (UnimplementedAdmissionServiceServer) mustEmbedUnimplementedAdmissionServiceServer() {}

// UnsafeAdmissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdmissionServiceServer will
// result in compilation errors.
type UnsafeAdmissionServiceServer interface {
	mustEmbedUnimplementedAdmissionServiceServer()
}

func RegisterAdmissionServiceServer(s grpc.ServiceRegistrar, srv AdmissionServiceServer) {
	s.RegisterService(&AdmissionService_ServiceDesc, srv)
}

func _AdmissionService_GetLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmissionServiceServer).GetLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdmissionService/getLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmissionServiceServer).GetLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmissionService_CreateRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistraionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmissionServiceServer).CreateRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdmissionService/CreateRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmissionServiceServer).CreateRegistration(ctx, req.(*RegistraionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmissionService_GetRegInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmissionServiceServer).GetRegInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AdmissionService/GetRegInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmissionServiceServer).GetRegInfo(ctx, req.(*GetReg))
	}
	return interceptor(ctx, in, info, handler)
}

// AdmissionService_ServiceDesc is the grpc.ServiceDesc for AdmissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdmissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AdmissionService",
	HandlerType: (*AdmissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getLogin",
			Handler:    _AdmissionService_GetLogin_Handler,
		},
		{
			MethodName: "CreateRegistration",
			Handler:    _AdmissionService_CreateRegistration_Handler,
		},
		{
			MethodName: "GetRegInfo",
			Handler:    _AdmissionService_GetRegInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
